{"ast":null,"code":"'use strict';\n\n/*!\n * Module dependencies.\n */\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schematype');\nconst castBoolean = require('../cast/boolean');\nconst utils = require('../utils');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\nSchemaBoolean.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\n * Sets a default option for all Boolean instances.\n *\n * #### Example:\n *\n *     // Make all booleans have `default` of false.\n *     mongoose.Schema.Boolean.set('default', false);\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ }).isPaid; // false\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBoolean.set = SchemaType.set;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Configure which values get casted to `true`.\n *\n * #### Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @static\n * @memberOf SchemaBoolean\n * @type {Set}\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => {\n    castBoolean.convertToTrue = v;\n  }\n});\n\n/**\n * Configure which values get casted to `false`.\n *\n * #### Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @static\n * @memberOf SchemaBoolean\n * @type {Set}\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => {\n    castBoolean.convertToFalse = v;\n  }\n});\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function (value) {\n  let castBoolean;\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\nSchemaBoolean.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n    if (handler) {\n      return handler.call(this, val);\n    }\n    return this.applySetters(null, val, context);\n  }\n  return this.applySetters(val, context);\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBoolean = typeof this.constructor.cast === 'function' ? this.constructor.cast() : SchemaBoolean.cast();\n  if (castBoolean == null) {\n    return v;\n  }\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;","map":{"version":3,"names":["CastError","require","SchemaType","castBoolean","utils","SchemaBoolean","path","options","call","schemaName","defaultOptions","prototype","Object","create","constructor","_cast","set","cast","caster","arguments","length","_defaultCaster","v","Error","_checkRequired","checkRequired","value","defineProperty","get","convertToTrue","convertToFalse","_castFunction","error","$conditionalHandlers","castForQuery","$conditional","val","context","handler","applySetters","_castNullish","Set","has","module","exports"],"sources":["C:/Users/sama/Documents/fullpage/node_modules/mongoose/lib/schema/boolean.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('../error/cast');\nconst SchemaType = require('../schematype');\nconst castBoolean = require('../cast/boolean');\nconst utils = require('../utils');\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\nSchemaBoolean.defaultOptions = {};\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/*!\n * ignore\n */\n\nSchemaBoolean._cast = castBoolean;\n\n/**\n * Sets a default option for all Boolean instances.\n *\n * #### Example:\n *\n *     // Make all booleans have `default` of false.\n *     mongoose.Schema.Boolean.set('default', false);\n *\n *     const Order = mongoose.model('Order', new Schema({ isPaid: Boolean }));\n *     new Order({ }).isPaid; // false\n *\n * @param {String} option The option you'd like to set the value for\n * @param {Any} value value for option\n * @return {undefined}\n * @function set\n * @static\n * @api public\n */\n\nSchemaBoolean.set = SchemaType.set;\n\n/**\n * Get/set the function used to cast arbitrary values to booleans.\n *\n * #### Example:\n *\n *     // Make Mongoose cast empty string '' to false.\n *     const original = mongoose.Schema.Boolean.cast();\n *     mongoose.Schema.Boolean.cast(v => {\n *       if (v === '') {\n *         return false;\n *       }\n *       return original(v);\n *     });\n *\n *     // Or disable casting entirely\n *     mongoose.Schema.Boolean.cast(false);\n *\n * @param {Function} caster\n * @return {Function}\n * @function get\n * @static\n * @api public\n */\n\nSchemaBoolean.cast = function cast(caster) {\n  if (arguments.length === 0) {\n    return this._cast;\n  }\n  if (caster === false) {\n    caster = this._defaultCaster;\n  }\n  this._cast = caster;\n\n  return this._cast;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._defaultCaster = v => {\n  if (v != null && typeof v !== 'boolean') {\n    throw new Error();\n  }\n  return v;\n};\n\n/*!\n * ignore\n */\n\nSchemaBoolean._checkRequired = v => v === true || v === false;\n\n/**\n * Override the function the required validator uses to check whether a boolean\n * passes the `required` check.\n *\n * @param {Function} fn\n * @return {Function}\n * @function checkRequired\n * @static\n * @api public\n */\n\nSchemaBoolean.checkRequired = SchemaType.checkRequired;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return this.constructor._checkRequired(value);\n};\n\n/**\n * Configure which values get casted to `true`.\n *\n * #### Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'affirmative' }).b; // undefined\n *     mongoose.Schema.Boolean.convertToTrue.add('affirmative');\n *     new M({ b: 'affirmative' }).b; // true\n *\n * @property convertToTrue\n * @static\n * @memberOf SchemaBoolean\n * @type {Set}\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToTrue', {\n  get: () => castBoolean.convertToTrue,\n  set: v => { castBoolean.convertToTrue = v; }\n});\n\n/**\n * Configure which values get casted to `false`.\n *\n * #### Example:\n *\n *     const M = mongoose.model('Test', new Schema({ b: Boolean }));\n *     new M({ b: 'nay' }).b; // undefined\n *     mongoose.Schema.Types.Boolean.convertToFalse.add('nay');\n *     new M({ b: 'nay' }).b; // false\n *\n * @property convertToFalse\n * @static\n * @memberOf SchemaBoolean\n * @type {Set}\n * @api public\n */\n\nObject.defineProperty(SchemaBoolean, 'convertToFalse', {\n  get: () => castBoolean.convertToFalse,\n  set: v => { castBoolean.convertToFalse = v; }\n});\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value) {\n  let castBoolean;\n  if (typeof this._castFunction === 'function') {\n    castBoolean = this._castFunction;\n  } else if (typeof this.constructor.cast === 'function') {\n    castBoolean = this.constructor.cast();\n  } else {\n    castBoolean = SchemaBoolean.cast();\n  }\n\n  try {\n    return castBoolean(value);\n  } catch (error) {\n    throw new CastError('Boolean', value, this.path, error, this);\n  }\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val, context) {\n  let handler;\n  if ($conditional != null) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this.applySetters(null, val, context);\n  }\n\n  return this.applySetters(val, context);\n};\n\n/**\n *\n * @api private\n */\n\nSchemaBoolean.prototype._castNullish = function _castNullish(v) {\n  if (typeof v === 'undefined') {\n    return v;\n  }\n  const castBoolean = typeof this.constructor.cast === 'function' ?\n    this.constructor.cast() :\n    SchemaBoolean.cast();\n  if (castBoolean == null) {\n    return v;\n  }\n  if (castBoolean.convertToFalse instanceof Set && castBoolean.convertToFalse.has(v)) {\n    return false;\n  }\n  if (castBoolean.convertToTrue instanceof Set && castBoolean.convertToTrue.has(v)) {\n    return true;\n  }\n  return v;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}