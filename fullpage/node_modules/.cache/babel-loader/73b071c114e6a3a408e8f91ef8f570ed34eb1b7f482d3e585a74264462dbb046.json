{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sama\\\\Documents\\\\fullpage\\\\fullpage\\\\src\\\\comp\\\\eligibilityToDonate.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './eligibilityToDonate.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedCard(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: props.image,\n      alt: \"Feed Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 7\n  }, this);\n}\n_c = FeedCard;\nconst express = require('express');\nconst mysql = require('mysql');\nconst app = express();\n\n// Create a MySQL connection\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'your_username',\n  password: 'your_password',\n  database: 'your_database'\n});\n\n// Connect to the database\nconnection.connect(error => {\n  if (error) {\n    console.error('Failed to connect to the database:', error);\n  } else {\n    console.log('Connected to the database.');\n  }\n});\n\n// Define a route to fetch the feed data from the database\napp.get('/feeds', (req, res) => {\n  const sql = 'SELECT * FROM feeds';\n  connection.query(sql, (error, results) => {\n    if (error) {\n      console.error('Failed to fetch feed data from database:', error);\n      res.status(500).send('Failed to fetch feed data from database.');\n    } else {\n      res.send(results);\n    }\n  });\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log('Server listening on port 3000.');\n});\nfunction EligibilityToDonate() {\n  _s();\n  const [feeds, setFeeds] = useState([]);\n  useEffect(() => {\n    // Fetch the feed data from the server\n    fetch('/feeds').then(response => response.json()).then(data => setFeeds(data)).catch(error => console.error('Failed to fetch feed data:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feeds-container\",\n    children: feeds.map(feed => /*#__PURE__*/_jsxDEV(FeedCard, {\n      image: feed.image,\n      title: feed.title,\n      description: feed.description\n    }, feed.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 7\n  }, this);\n}\n_s(EligibilityToDonate, \"Fs12zjbx1oq2YSgfrvaslyINp4A=\");\n_c2 = EligibilityToDonate;\nexport default EligibilityToDonate;\nvar _c, _c2;\n$RefreshReg$(_c, \"FeedCard\");\n$RefreshReg$(_c2, \"EligibilityToDonate\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FeedCard","props","className","children","src","image","alt","fileName","_jsxFileName","lineNumber","columnNumber","title","description","_c","express","require","mysql","app","connection","createConnection","host","user","password","database","connect","error","console","log","get","req","res","sql","query","results","status","send","listen","EligibilityToDonate","_s","feeds","setFeeds","fetch","then","response","json","data","catch","map","feed","id","_c2","$RefreshReg$"],"sources":["C:/Users/sama/Documents/fullpage/fullpage/src/comp/eligibilityToDonate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './eligibilityToDonate.css';\r\n\r\n\r\n  function FeedCard(props) {\r\n    return (\r\n      <div className=\"feed-card\">\r\n        <img src={props.image} alt=\"Feed Image\" />\r\n        <div className=\"feed-content\">\r\n          <h3>{props.title}</h3>\r\n          <p>{props.description}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  const express = require('express');\r\nconst mysql = require('mysql');\r\n\r\nconst app = express();\r\n\r\n// Create a MySQL connection\r\nconst connection = mysql.createConnection({\r\n  host: 'localhost',\r\n  user: 'your_username',\r\n  password: 'your_password',\r\n  database: 'your_database',\r\n});\r\n\r\n// Connect to the database\r\nconnection.connect((error) => {\r\n  if (error) {\r\n    console.error('Failed to connect to the database:', error);\r\n  } else {\r\n    console.log('Connected to the database.');\r\n  }\r\n});\r\n\r\n// Define a route to fetch the feed data from the database\r\napp.get('/feeds', (req, res) => {\r\n  const sql = 'SELECT * FROM feeds';\r\n\r\n  connection.query(sql, (error, results) => {\r\n    if (error) {\r\n      console.error('Failed to fetch feed data from database:', error);\r\n      res.status(500).send('Failed to fetch feed data from database.');\r\n    } else {\r\n      res.send(results);\r\n    }\r\n  });\r\n});\r\n\r\n// Start the server\r\napp.listen(3000, () => {\r\n  console.log('Server listening on port 3000.');\r\n});\r\n\r\n  function EligibilityToDonate() {\r\n    const [feeds, setFeeds] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      // Fetch the feed data from the server\r\n      fetch('/feeds')\r\n        .then(response => response.json())\r\n        .then(data => setFeeds(data))\r\n        .catch(error => console.error('Failed to fetch feed data:', error));\r\n    }, []);\r\n  \r\n    return (\r\n      <div className=\"feeds-container\">\r\n        {feeds.map(feed => (\r\n          <FeedCard\r\n            key={feed.id}\r\n            image={feed.image}\r\n            title={feed.title}\r\n            description={feed.description}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\nexport default EligibilityToDonate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}