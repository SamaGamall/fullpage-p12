{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBOIDC = exports.OIDC_WORKFLOWS = void 0;\nconst error_1 = require(\"../../error\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst aws_service_workflow_1 = require(\"./mongodb_oidc/aws_service_workflow\");\nconst callback_workflow_1 = require(\"./mongodb_oidc/callback_workflow\");\n/** @internal */\nexports.OIDC_WORKFLOWS = new Map();\nexports.OIDC_WORKFLOWS.set('callback', new callback_workflow_1.CallbackWorkflow());\nexports.OIDC_WORKFLOWS.set('aws', new aws_service_workflow_1.AwsServiceWorkflow());\n/**\n * OIDC auth provider.\n * @experimental\n */\nclass MongoDBOIDC extends auth_provider_1.AuthProvider {\n  /**\n   * Instantiate the auth provider.\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Authenticate using OIDC\n   */\n  async auth(authContext) {\n    const {\n      connection,\n      credentials,\n      response,\n      reauthenticating\n    } = authContext;\n    if (response?.speculativeAuthenticate) {\n      return;\n    }\n    if (!credentials) {\n      throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    const workflow = getWorkflow(credentials);\n    await workflow.execute(connection, credentials, reauthenticating);\n  }\n  /**\n   * Add the speculative auth for the initial handshake.\n   */\n  async prepare(handshakeDoc, authContext) {\n    const {\n      credentials\n    } = authContext;\n    if (!credentials) {\n      throw new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n    const workflow = getWorkflow(credentials);\n    const result = await workflow.speculativeAuth();\n    return {\n      ...handshakeDoc,\n      ...result\n    };\n  }\n}\nexports.MongoDBOIDC = MongoDBOIDC;\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials) {\n  const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n  const workflow = exports.OIDC_WORKFLOWS.get(providerName || 'callback');\n  if (!workflow) {\n    throw new error_1.MongoInvalidArgumentError(`Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`);\n  }\n  return workflow;\n}","map":{"version":3,"names":["error_1","require","auth_provider_1","aws_service_workflow_1","callback_workflow_1","exports","OIDC_WORKFLOWS","Map","set","CallbackWorkflow","AwsServiceWorkflow","MongoDBOIDC","AuthProvider","constructor","auth","authContext","connection","credentials","response","reauthenticating","speculativeAuthenticate","MongoMissingCredentialsError","workflow","getWorkflow","execute","prepare","handshakeDoc","result","speculativeAuth","providerName","mechanismProperties","PROVIDER_NAME","get","MongoInvalidArgumentError"],"sources":["C:\\Users\\sama\\Documents\\fullpage\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_oidc.ts"],"sourcesContent":["import { MongoInvalidArgumentError, MongoMissingCredentialsError } from '../../error';\nimport type { HandshakeDocument } from '../connect';\nimport { type AuthContext, AuthProvider } from './auth_provider';\nimport type { MongoCredentials } from './mongo_credentials';\nimport { AwsServiceWorkflow } from './mongodb_oidc/aws_service_workflow';\nimport { CallbackWorkflow } from './mongodb_oidc/callback_workflow';\nimport type { Workflow } from './mongodb_oidc/workflow';\n\n/**\n * @public\n * @experimental\n */\nexport interface OIDCMechanismServerStep1 {\n  authorizationEndpoint?: string;\n  tokenEndpoint?: string;\n  deviceAuthorizationEndpoint?: string;\n  clientId: string;\n  clientSecret?: string;\n  requestScopes?: string[];\n}\n\n/**\n * @public\n * @experimental\n */\nexport interface OIDCRequestTokenResult {\n  accessToken: string;\n  expiresInSeconds?: number;\n  refreshToken?: string;\n}\n\n/**\n * @public\n * @experimental\n */\nexport type OIDCRequestFunction = (\n  principalName: string,\n  serverResult: OIDCMechanismServerStep1,\n  timeout: AbortSignal | number\n) => Promise<OIDCRequestTokenResult>;\n\n/**\n * @public\n * @experimental\n */\nexport type OIDCRefreshFunction = (\n  principalName: string,\n  serverResult: OIDCMechanismServerStep1,\n  result: OIDCRequestTokenResult,\n  timeout: AbortSignal | number\n) => Promise<OIDCRequestTokenResult>;\n\ntype ProviderName = 'aws' | 'callback';\n\n/** @internal */\nexport const OIDC_WORKFLOWS: Map<ProviderName, Workflow> = new Map();\nOIDC_WORKFLOWS.set('callback', new CallbackWorkflow());\nOIDC_WORKFLOWS.set('aws', new AwsServiceWorkflow());\n\n/**\n * OIDC auth provider.\n * @experimental\n */\nexport class MongoDBOIDC extends AuthProvider {\n  /**\n   * Instantiate the auth provider.\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * Authenticate using OIDC\n   */\n  override async auth(authContext: AuthContext): Promise<void> {\n    const { connection, credentials, response, reauthenticating } = authContext;\n\n    if (response?.speculativeAuthenticate) {\n      return;\n    }\n\n    if (!credentials) {\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n\n    const workflow = getWorkflow(credentials);\n\n    await workflow.execute(connection, credentials, reauthenticating);\n  }\n\n  /**\n   * Add the speculative auth for the initial handshake.\n   */\n  override async prepare(\n    handshakeDoc: HandshakeDocument,\n    authContext: AuthContext\n  ): Promise<HandshakeDocument> {\n    const { credentials } = authContext;\n\n    if (!credentials) {\n      throw new MongoMissingCredentialsError('AuthContext must provide credentials.');\n    }\n\n    const workflow = getWorkflow(credentials);\n\n    const result = await workflow.speculativeAuth();\n    return { ...handshakeDoc, ...result };\n  }\n}\n\n/**\n * Gets either a device workflow or callback workflow.\n */\nfunction getWorkflow(credentials: MongoCredentials): Workflow {\n  const providerName = credentials.mechanismProperties.PROVIDER_NAME;\n  const workflow = OIDC_WORKFLOWS.get(providerName || 'callback');\n  if (!workflow) {\n    throw new MongoInvalidArgumentError(\n      `Could not load workflow for provider ${credentials.mechanismProperties.PROVIDER_NAME}`\n    );\n  }\n  return workflow;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,OAAA,GAAAC,OAAA;AAEA,MAAAC,eAAA,GAAAD,OAAA;AAEA,MAAAE,sBAAA,GAAAF,OAAA;AACA,MAAAG,mBAAA,GAAAH,OAAA;AAiDA;AACaI,OAAA,CAAAC,cAAc,GAAgC,IAAIC,GAAG,EAAE;AACpEF,OAAA,CAAAC,cAAc,CAACE,GAAG,CAAC,UAAU,EAAE,IAAIJ,mBAAA,CAAAK,gBAAgB,EAAE,CAAC;AACtDJ,OAAA,CAAAC,cAAc,CAACE,GAAG,CAAC,KAAK,EAAE,IAAIL,sBAAA,CAAAO,kBAAkB,EAAE,CAAC;AAEnD;;;;AAIA,MAAaC,WAAY,SAAQT,eAAA,CAAAU,YAAY;EAC3C;;;EAGAC,YAAA;IACE,KAAK,EAAE;EACT;EAEA;;;EAGS,MAAMC,IAAIA,CAACC,WAAwB;IAC1C,MAAM;MAAEC,UAAU;MAAEC,WAAW;MAAEC,QAAQ;MAAEC;IAAgB,CAAE,GAAGJ,WAAW;IAE3E,IAAIG,QAAQ,EAAEE,uBAAuB,EAAE;MACrC;;IAGF,IAAI,CAACH,WAAW,EAAE;MAChB,MAAM,IAAIjB,OAAA,CAAAqB,4BAA4B,CAAC,uCAAuC,CAAC;;IAGjF,MAAMC,QAAQ,GAAGC,WAAW,CAACN,WAAW,CAAC;IAEzC,MAAMK,QAAQ,CAACE,OAAO,CAACR,UAAU,EAAEC,WAAW,EAAEE,gBAAgB,CAAC;EACnE;EAEA;;;EAGS,MAAMM,OAAOA,CACpBC,YAA+B,EAC/BX,WAAwB;IAExB,MAAM;MAAEE;IAAW,CAAE,GAAGF,WAAW;IAEnC,IAAI,CAACE,WAAW,EAAE;MAChB,MAAM,IAAIjB,OAAA,CAAAqB,4BAA4B,CAAC,uCAAuC,CAAC;;IAGjF,MAAMC,QAAQ,GAAGC,WAAW,CAACN,WAAW,CAAC;IAEzC,MAAMU,MAAM,GAAG,MAAML,QAAQ,CAACM,eAAe,EAAE;IAC/C,OAAO;MAAE,GAAGF,YAAY;MAAE,GAAGC;IAAM,CAAE;EACvC;;AA5CFtB,OAAA,CAAAM,WAAA,GAAAA,WAAA;AA+CA;;;AAGA,SAASY,WAAWA,CAACN,WAA6B;EAChD,MAAMY,YAAY,GAAGZ,WAAW,CAACa,mBAAmB,CAACC,aAAa;EAClE,MAAMT,QAAQ,GAAGjB,OAAA,CAAAC,cAAc,CAAC0B,GAAG,CAACH,YAAY,IAAI,UAAU,CAAC;EAC/D,IAAI,CAACP,QAAQ,EAAE;IACb,MAAM,IAAItB,OAAA,CAAAiC,yBAAyB,CACjC,wCAAwChB,WAAW,CAACa,mBAAmB,CAACC,aAAa,EAAE,CACxF;;EAEH,OAAOT,QAAQ;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}