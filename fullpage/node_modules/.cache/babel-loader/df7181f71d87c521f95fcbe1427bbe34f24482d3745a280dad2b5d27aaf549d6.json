{"ast":null,"code":"/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryhelpers');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.cursor()) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query, options) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, {\n    autoDestroy: true,\n    objectMode: true\n  });\n  this.cursor = null;\n  this.query = query;\n  const _this = this;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = options || {};\n  model.hooks.execPre('find', query, err => {\n    if (err != null) {\n      _this._markError(err);\n      _this.listeners('error').length > 0 && _this.emit('error', err);\n      return;\n    }\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      this.options.cursor = options.cursor || {};\n      this.options.cursor.batchSize = options.batchSize;\n\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n    model.collection.find(query._conditions, this.options, (err, cursor) => {\n      if (err != null) {\n        _this._markError(err);\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n        return;\n      }\n      if (_this._error) {\n        cursor.close(function () {});\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n      }\n      _this.cursor = cursor;\n      _this.emit('cursor', cursor);\n    });\n  });\n}\nutil.inherits(QueryCursor, Readable);\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._read = function () {\n  const _this = this;\n  _next(this, function (error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function (error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @memberOf QueryCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(QueryCursor.prototype, 'map', {\n  value: function (fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._markError = function (error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nQueryCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n    this.emit('close');\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n};\n\n/**\n * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n * if the resultant data has already been retrieved by this cursor.\n *\n * @return {AggregationCursor} this\n * @api public\n * @method rewind\n */\n\nQueryCursor.prototype.rewind = function () {\n  const _this = this;\n  _waitForCursor(this, function () {\n    _this.cursor.rewind();\n  });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = async function next() {\n  if (arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.next() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, function (error, doc) {\n      if (error) {\n        return reject(error);\n      }\n      resolve(doc);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * #### Example:\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize] if set, will call `fn()` with arrays of documents with length at most `batchSize`\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function (fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n  return eachAsync(function (cb) {\n    return _next(_this, cb);\n  }, fn, opts, callback);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function (flag, value) {\n  const _this = this;\n  _waitForCursor(this, function () {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function (val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function () {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf QueryCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function () {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? {\n    done: true\n  } : {\n    value: doc,\n    done: false\n  };\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function (err, doc) {\n      if (err || doc === null && !ctx._mongooseOptions.transformNull) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function (doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n  if (ctx._error) {\n    return immediate(function () {\n      callback(ctx._error);\n    });\n  }\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query, ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        ctx.cursor.next().then(res => {\n          _onNext.call({\n            ctx,\n            callback\n          }, null, res);\n        }, err => {\n          _onNext.call({\n            ctx,\n            callback\n          }, err);\n        });\n        return;\n      }\n    } else {\n      return ctx.cursor.next().then(doc => {\n        if (!doc) {\n          callback(null, null);\n          return;\n        }\n        if (!ctx.query._mongooseOptions.populate) {\n          return _nextDoc(ctx, doc, null, callback);\n        }\n        ctx.query.model.populate(doc, ctx._pop).then(doc => {\n          _nextDoc(ctx, doc, ctx._pop, callback);\n        }, err => {\n          callback(err);\n        });\n      }, error => {\n        callback(error);\n      });\n    }\n  } else {\n    ctx.once('error', cb);\n    ctx.once('cursor', function (cursor) {\n      ctx.removeListener('error', cb);\n      if (cursor == null) {\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n  this.ctx._batchDocs.push(doc);\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next().then(res => {\n        _onNext.call(this, null, res);\n      }, err => {\n        _onNext.call(this, err);\n      }));\n    }\n    this.ctx.cursor.next().then(res => {\n      _onNext.call(this, null, res);\n    }, err => {\n      _onNext.call(this, err);\n    });\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  const _this = this;\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop).then(() => {\n    _nextDoc(_this.ctx, _this.ctx._batchDocs.shift(), _this.ctx._pop, _this.callback);\n  }, err => {\n    _this.callback(err);\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n  const {\n    model,\n    _fields,\n    _userProvidedFields,\n    options\n  } = ctx.query;\n  helpers.createModelAndInit(model, doc, _fields, _userProvidedFields, options, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function (cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\nmodule.exports = QueryCursor;","map":{"version":3,"names":["MongooseError","require","Readable","eachAsync","helpers","immediate","util","QueryCursor","query","options","call","autoDestroy","objectMode","cursor","_this","model","_mongooseOptions","_transforms","hooks","execPre","err","_markError","listeners","length","emit","concat","slice","transform","push","batchSize","_populateBatchSize","Math","min","collection","find","_conditions","_error","close","inherits","prototype","_read","_next","error","doc","Object","defineProperty","value","fn","enumerable","configurable","writable","arguments","rewind","_waitForCursor","next","Promise","resolve","reject","opts","callback","cb","addCursorFlag","flag","transformNull","val","_transformForAsyncIterator","indexOf","map","Symbol","asyncIterator","done","ctx","reduce","populate","_pop","preparePopulationOptionsMQ","__noPromise","_batchDocs","_nextDoc","shift","_batchExhausted","then","res","_onNext","once","removeListener","_populateBatch","pop","lean","execPost","_fields","_userProvidedFields","createModelAndInit","module","exports"],"sources":["C:/Users/sama/Documents/fullpage/node_modules/mongoose/lib/cursor/QueryCursor.js"],"sourcesContent":["/*!\n * Module dependencies.\n */\n\n'use strict';\n\nconst MongooseError = require('../error/mongooseError');\nconst Readable = require('stream').Readable;\nconst eachAsync = require('../helpers/cursor/eachAsync');\nconst helpers = require('../queryhelpers');\nconst immediate = require('../helpers/immediate');\nconst util = require('util');\n\n/**\n * A QueryCursor is a concurrency primitive for processing query results\n * one document at a time. A QueryCursor fulfills the Node.js streams3 API,\n * in addition to several other mechanisms for loading documents from MongoDB\n * one at a time.\n *\n * QueryCursors execute the model's pre `find` hooks before loading any documents\n * from MongoDB, and the model's post `find` hooks after loading each document.\n *\n * Unless you're an advanced user, do **not** instantiate this class directly.\n * Use [`Query#cursor()`](https://mongoosejs.com/docs/api/query.html#Query.prototype.cursor()) instead.\n *\n * @param {Query} query\n * @param {Object} options query options passed to `.find()`\n * @inherits Readable https://nodejs.org/api/stream.html#class-streamreadable\n * @event `cursor`: Emitted when the cursor is created\n * @event `error`: Emitted when an error occurred\n * @event `data`: Emitted when the stream is flowing and the next doc is ready\n * @event `end`: Emitted when the stream is exhausted\n * @api public\n */\n\nfunction QueryCursor(query, options) {\n  // set autoDestroy=true because on node 12 it's by default false\n  // gh-10902 need autoDestroy to destroy correctly and emit 'close' event\n  Readable.call(this, { autoDestroy: true, objectMode: true });\n\n  this.cursor = null;\n  this.query = query;\n  const _this = this;\n  const model = query.model;\n  this._mongooseOptions = {};\n  this._transforms = [];\n  this.model = model;\n  this.options = options || {};\n\n  model.hooks.execPre('find', query, (err) => {\n    if (err != null) {\n      _this._markError(err);\n      _this.listeners('error').length > 0 && _this.emit('error', err);\n      return;\n    }\n    this._transforms = this._transforms.concat(query._transforms.slice());\n    if (this.options.transform) {\n      this._transforms.push(options.transform);\n    }\n    // Re: gh-8039, you need to set the `cursor.batchSize` option, top-level\n    // `batchSize` option doesn't work.\n    if (this.options.batchSize) {\n      this.options.cursor = options.cursor || {};\n      this.options.cursor.batchSize = options.batchSize;\n\n      // Max out the number of documents we'll populate in parallel at 5000.\n      this.options._populateBatchSize = Math.min(this.options.batchSize, 5000);\n    }\n    model.collection.find(query._conditions, this.options, (err, cursor) => {\n      if (err != null) {\n        _this._markError(err);\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n        return;\n      }\n\n      if (_this._error) {\n        cursor.close(function() {});\n        _this.listeners('error').length > 0 && _this.emit('error', _this._error);\n      }\n      _this.cursor = cursor;\n      _this.emit('cursor', cursor);\n    });\n  });\n}\n\nutil.inherits(QueryCursor, Readable);\n\n/**\n * Necessary to satisfy the Readable API\n * @method _read\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._read = function() {\n  const _this = this;\n  _next(this, function(error, doc) {\n    if (error) {\n      return _this.emit('error', error);\n    }\n    if (!doc) {\n      _this.push(null);\n      _this.cursor.close(function(error) {\n        if (error) {\n          return _this.emit('error', error);\n        }\n      });\n      return;\n    }\n    _this.push(doc);\n  });\n};\n\n/**\n * Registers a transform function which subsequently maps documents retrieved\n * via the streams interface or `.next()`\n *\n * #### Example:\n *\n *     // Map documents returned by `data` events\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *        doc.foo = \"bar\";\n *        return doc;\n *       })\n *       on('data', function(doc) { console.log(doc.foo); });\n *\n *     // Or map documents returned by `.next()`\n *     const cursor = Thing.find({ name: /^hello/ }).\n *       cursor().\n *       map(function (doc) {\n *         doc.foo = \"bar\";\n *         return doc;\n *       });\n *     cursor.next(function(error, doc) {\n *       console.log(doc.foo);\n *     });\n *\n * @param {Function} fn\n * @return {QueryCursor}\n * @memberOf QueryCursor\n * @api public\n * @method map\n */\n\nObject.defineProperty(QueryCursor.prototype, 'map', {\n  value: function(fn) {\n    this._transforms.push(fn);\n    return this;\n  },\n  enumerable: true,\n  configurable: true,\n  writable: true\n});\n\n/**\n * Marks this cursor as errored\n * @method _markError\n * @memberOf QueryCursor\n * @instance\n * @api private\n */\n\nQueryCursor.prototype._markError = function(error) {\n  this._error = error;\n  return this;\n};\n\n/**\n * Marks this cursor as closed. Will stop streaming and subsequent calls to\n * `next()` will error.\n *\n * @return {Promise}\n * @api public\n * @method close\n * @emits close\n * @see AggregationCursor.close https://mongodb.github.io/node-mongodb-native/4.9/classes/AggregationCursor.html#close\n */\n\nQueryCursor.prototype.close = async function close() {\n  if (typeof arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.close() no longer accepts a callback');\n  }\n  try {\n    await this.cursor.close();\n    this.emit('close');\n  } catch (error) {\n    this.listeners('error').length > 0 && this.emit('error', error);\n    throw error;\n  }\n};\n\n/**\n * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n * if the resultant data has already been retrieved by this cursor.\n *\n * @return {AggregationCursor} this\n * @api public\n * @method rewind\n */\n\nQueryCursor.prototype.rewind = function() {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.rewind();\n  });\n  return this;\n};\n\n/**\n * Get the next document from this cursor. Will return `null` when there are\n * no documents left.\n *\n * @return {Promise}\n * @api public\n * @method next\n */\n\nQueryCursor.prototype.next = async function next() {\n  if (arguments[0] === 'function') {\n    throw new MongooseError('QueryCursor.prototype.next() no longer accepts a callback');\n  }\n  return new Promise((resolve, reject) => {\n    _next(this, function(error, doc) {\n      if (error) {\n        return reject(error);\n      }\n      resolve(doc);\n    });\n  });\n};\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * #### Example:\n *\n *     // Iterate over documents asynchronously\n *     Thing.\n *       find({ name: /^hello/ }).\n *       cursor().\n *       eachAsync(async function (doc, i) {\n *         doc.foo = doc.bar + i;\n *         await doc.save();\n *       })\n *\n * @param {Function} fn\n * @param {Object} [options]\n * @param {Number} [options.parallel] the number of promises to execute in parallel. Defaults to 1.\n * @param {Number} [options.batchSize] if set, will call `fn()` with arrays of documents with length at most `batchSize`\n * @param {Boolean} [options.continueOnError=false] if true, `eachAsync()` iterates through all docs even if `fn` throws an error. If false, `eachAsync()` throws an error immediately if the given function `fn()` throws an error.\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nQueryCursor.prototype.eachAsync = function(fn, opts, callback) {\n  const _this = this;\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts || {};\n\n  return eachAsync(function(cb) { return _next(_this, cb); }, fn, opts, callback);\n};\n\n/**\n * The `options` passed in to the `QueryCursor` constructor.\n *\n * @api public\n * @property options\n */\n\nQueryCursor.prototype.options;\n\n/**\n * Adds a [cursor flag](https://mongodb.github.io/node-mongodb-native/4.9/classes/FindCursor.html#addCursorFlag).\n * Useful for setting the `noCursorTimeout` and `tailable` flags.\n *\n * @param {String} flag\n * @param {Boolean} value\n * @return {AggregationCursor} this\n * @api public\n * @method addCursorFlag\n */\n\nQueryCursor.prototype.addCursorFlag = function(flag, value) {\n  const _this = this;\n  _waitForCursor(this, function() {\n    _this.cursor.addCursorFlag(flag, value);\n  });\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype.transformNull = function(val) {\n  if (arguments.length === 0) {\n    val = true;\n  }\n  this._mongooseOptions.transformNull = val;\n  return this;\n};\n\n/*!\n * ignore\n */\n\nQueryCursor.prototype._transformForAsyncIterator = function() {\n  if (this._transforms.indexOf(_transformForAsyncIterator) === -1) {\n    this.map(_transformForAsyncIterator);\n  }\n  return this;\n};\n\n/**\n * Returns an asyncIterator for use with [`for/await/of` loops](https://thecodebarbarian.com/getting-started-with-async-iterators-in-node-js).\n * You do not need to call this function explicitly, the JavaScript runtime\n * will call it for you.\n *\n * #### Example:\n *\n *     // Works without using `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }])) {\n *       console.log(doc.name);\n *     }\n *\n *     // Can also use `cursor()`\n *     for await (const doc of Model.find([{ $sort: { name: 1 } }]).cursor()) {\n *       console.log(doc.name);\n *     }\n *\n * Node.js 10.x supports async iterators natively without any flags. You can\n * enable async iterators in Node.js 8.x using the [`--harmony_async_iteration` flag](https://github.com/tc39/proposal-async-iteration/issues/117#issuecomment-346695187).\n *\n * **Note:** This function is not if `Symbol.asyncIterator` is undefined. If\n * `Symbol.asyncIterator` is undefined, that means your Node.js version does not\n * support async iterators.\n *\n * @method [Symbol.asyncIterator]\n * @memberOf QueryCursor\n * @instance\n * @api public\n */\n\nif (Symbol.asyncIterator != null) {\n  QueryCursor.prototype[Symbol.asyncIterator] = function() {\n    return this.transformNull()._transformForAsyncIterator();\n  };\n}\n\n/*!\n * ignore\n */\n\nfunction _transformForAsyncIterator(doc) {\n  return doc == null ? { done: true } : { value: doc, done: false };\n}\n\n/**\n * Get the next doc from the underlying cursor and mongooseify it\n * (populate, etc.)\n * @param {Any} ctx\n * @param {Function} cb\n * @api private\n */\n\nfunction _next(ctx, cb) {\n  let callback = cb;\n  if (ctx._transforms.length) {\n    callback = function(err, doc) {\n      if (err || (doc === null && !ctx._mongooseOptions.transformNull)) {\n        return cb(err, doc);\n      }\n      cb(err, ctx._transforms.reduce(function(doc, fn) {\n        return fn.call(ctx, doc);\n      }, doc));\n    };\n  }\n\n  if (ctx._error) {\n    return immediate(function() {\n      callback(ctx._error);\n    });\n  }\n\n  if (ctx.cursor) {\n    if (ctx.query._mongooseOptions.populate && !ctx._pop) {\n      ctx._pop = helpers.preparePopulationOptionsMQ(ctx.query,\n        ctx.query._mongooseOptions);\n      ctx._pop.__noPromise = true;\n    }\n    if (ctx.query._mongooseOptions.populate && ctx.options._populateBatchSize > 1) {\n      if (ctx._batchDocs && ctx._batchDocs.length) {\n        // Return a cached populated doc\n        return _nextDoc(ctx, ctx._batchDocs.shift(), ctx._pop, callback);\n      } else if (ctx._batchExhausted) {\n        // Internal cursor reported no more docs. Act the same here\n        return callback(null, null);\n      } else {\n        // Request as many docs as batchSize, to populate them also in batch\n        ctx._batchDocs = [];\n        ctx.cursor.next().then(\n          res => { _onNext.call({ ctx, callback }, null, res); },\n          err => { _onNext.call({ ctx, callback }, err); }\n        );\n        return;\n      }\n    } else {\n      return ctx.cursor.next().then(\n        doc => {\n          if (!doc) {\n            callback(null, null);\n            return;\n          }\n\n          if (!ctx.query._mongooseOptions.populate) {\n            return _nextDoc(ctx, doc, null, callback);\n          }\n\n          ctx.query.model.populate(doc, ctx._pop).then(\n            doc => {\n              _nextDoc(ctx, doc, ctx._pop, callback);\n            },\n            err => {\n              callback(err);\n            }\n          );\n        },\n        error => {\n          callback(error);\n        }\n      );\n    }\n  } else {\n    ctx.once('error', cb);\n\n    ctx.once('cursor', function(cursor) {\n      ctx.removeListener('error', cb);\n      if (cursor == null) {\n        return;\n      }\n      _next(ctx, cb);\n    });\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _onNext(error, doc) {\n  if (error) {\n    return this.callback(error);\n  }\n  if (!doc) {\n    this.ctx._batchExhausted = true;\n    return _populateBatch.call(this);\n  }\n\n  this.ctx._batchDocs.push(doc);\n\n  if (this.ctx._batchDocs.length < this.ctx.options._populateBatchSize) {\n    // If both `batchSize` and `_populateBatchSize` are huge, calling `next()` repeatedly may\n    // cause a stack overflow. So make sure we clear the stack regularly.\n    if (this.ctx._batchDocs.length > 0 && this.ctx._batchDocs.length % 1000 === 0) {\n      return immediate(() => this.ctx.cursor.next().then(\n        res => { _onNext.call(this, null, res); },\n        err => { _onNext.call(this, err); }\n      ));\n    }\n    this.ctx.cursor.next().then(\n      res => { _onNext.call(this, null, res); },\n      err => { _onNext.call(this, err); }\n    );\n  } else {\n    _populateBatch.call(this);\n  }\n}\n\n/*!\n * ignore\n */\n\nfunction _populateBatch() {\n  if (!this.ctx._batchDocs.length) {\n    return this.callback(null, null);\n  }\n  const _this = this;\n  this.ctx.query.model.populate(this.ctx._batchDocs, this.ctx._pop).then(\n    () => {\n      _nextDoc(_this.ctx, _this.ctx._batchDocs.shift(), _this.ctx._pop, _this.callback);\n    },\n    err => {\n      _this.callback(err);\n    }\n  );\n}\n\n/*!\n * ignore\n */\n\nfunction _nextDoc(ctx, doc, pop, callback) {\n  if (ctx.query._mongooseOptions.lean) {\n    return ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  }\n\n  const { model, _fields, _userProvidedFields, options } = ctx.query;\n  helpers.createModelAndInit(model, doc, _fields, _userProvidedFields, options, pop, (err, doc) => {\n    if (err != null) {\n      return callback(err);\n    }\n    ctx.model.hooks.execPost('find', ctx.query, [[doc]], err => {\n      if (err != null) {\n        return callback(err);\n      }\n      callback(null, doc);\n    });\n  });\n}\n\n/*!\n * ignore\n */\n\nfunction _waitForCursor(ctx, cb) {\n  if (ctx.cursor) {\n    return cb();\n  }\n  ctx.once('cursor', function(cursor) {\n    if (cursor == null) {\n      return;\n    }\n    cb();\n  });\n}\n\nmodule.exports = QueryCursor;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}