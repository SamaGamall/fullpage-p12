{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoClient = exports.ServerApiVersion = void 0;\nconst util_1 = require(\"util\");\nconst bson_1 = require(\"./bson\");\nconst change_stream_1 = require(\"./change_stream\");\nconst connection_string_1 = require(\"./connection_string\");\nconst constants_1 = require(\"./constants\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_logger_1 = require(\"./mongo_logger\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst read_preference_1 = require(\"./read_preference\");\nconst server_selection_1 = require(\"./sdam/server_selection\");\nconst topology_1 = require(\"./sdam/topology\");\nconst sessions_1 = require(\"./sessions\");\nconst utils_1 = require(\"./utils\");\n/** @public */\nexports.ServerApiVersion = Object.freeze({\n  v1: '1'\n});\n/** @internal */\nconst kOptions = Symbol('options');\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from 'mongodb';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nclass MongoClient extends mongo_types_1.TypedEventEmitter {\n  constructor(url, options) {\n    super();\n    this[kOptions] = (0, connection_string_1.parseOptions)(url, this, options);\n    this.mongoLogger = new mongo_logger_1.MongoLogger(this[kOptions].mongoLoggerOptions);\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this;\n    // The internal state\n    this.s = {\n      url,\n      bsonOptions: (0, bson_1.resolveBSONOptions)(this[kOptions]),\n      namespace: (0, utils_1.ns)('admin'),\n      hasBeenClosed: false,\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      activeSessions: new Set(),\n      get options() {\n        return client[kOptions];\n      },\n      get readConcern() {\n        return client[kOptions].readConcern;\n      },\n      get writeConcern() {\n        return client[kOptions].writeConcern;\n      },\n      get readPreference() {\n        return client[kOptions].readPreference;\n      },\n      get isMongoClient() {\n        return true;\n      }\n    };\n  }\n  /** @see MongoOptions */\n  get options() {\n    return Object.freeze({\n      ...this[kOptions]\n    });\n  }\n  get serverApi() {\n    return this[kOptions].serverApi && Object.freeze({\n      ...this[kOptions].serverApi\n    });\n  }\n  /**\n   * Intended for APM use only\n   * @internal\n   */\n  get monitorCommands() {\n    return this[kOptions].monitorCommands;\n  }\n  set monitorCommands(value) {\n    this[kOptions].monitorCommands = value;\n  }\n  get autoEncrypter() {\n    return this[kOptions].autoEncrypter;\n  }\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n  get readPreference() {\n    return this.s.readPreference;\n  }\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @see docs.mongodb.org/manual/reference/connection-string/\n   */\n  async connect() {\n    if (this.connectionLock) {\n      return this.connectionLock;\n    }\n    try {\n      this.connectionLock = this._connect();\n      await this.connectionLock;\n    } finally {\n      // release\n      this.connectionLock = undefined;\n    }\n    return this;\n  }\n  /**\n   * Create a topology to open the connection, must be locked to avoid topology leaks in concurrency scenario.\n   * Locking is enforced by the connect method.\n   *\n   * @internal\n   */\n  async _connect() {\n    var _this = this;\n    if (this.topology && this.topology.isConnected()) {\n      return this;\n    }\n    const options = this[kOptions];\n    if (typeof options.srvHost === 'string') {\n      const hosts = await (0, connection_string_1.resolveSRVRecord)(options);\n      for (const [index, host] of hosts.entries()) {\n        options.hosts[index] = host;\n      }\n    }\n    const topology = new topology_1.Topology(options.hosts, options);\n    // Events can be emitted before initialization is complete so we have to\n    // save the reference to the topology on the client ASAP if the event handlers need to access it\n    this.topology = topology;\n    topology.client = this;\n    topology.once(topology_1.Topology.OPEN, () => this.emit('open', this));\n    for (const event of constants_1.MONGO_CLIENT_EVENTS) {\n      topology.on(event, function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return _this.emit(event, ...args);\n      });\n    }\n    const topologyConnect = async () => {\n      try {\n        await (0, util_1.promisify)(callback => topology.connect(options, callback))();\n      } catch (error) {\n        topology.close({\n          force: true\n        });\n        throw error;\n      }\n    };\n    if (this.autoEncrypter) {\n      const initAutoEncrypter = (0, util_1.promisify)(callback => this.autoEncrypter?.init(callback));\n      await initAutoEncrypter();\n      await topologyConnect();\n      await options.encrypter.connectInternalClient();\n    } else {\n      await topologyConnect();\n    }\n    return this;\n  }\n  /**\n   * Close the client and its underlying connections\n   *\n   * @param force - Force close, emitting no events\n   */\n  async close() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // There's no way to set hasBeenClosed back to false\n    Object.defineProperty(this.s, 'hasBeenClosed', {\n      value: true,\n      enumerable: true,\n      configurable: false,\n      writable: false\n    });\n    const activeSessionEnds = Array.from(this.s.activeSessions, session => session.endSession());\n    this.s.activeSessions.clear();\n    await Promise.all(activeSessionEnds);\n    if (this.topology == null) {\n      return;\n    }\n    // If we would attempt to select a server and get nothing back we short circuit\n    // to avoid the server selection timeout.\n    const selector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred);\n    const topologyDescription = this.topology.description;\n    const serverDescriptions = Array.from(topologyDescription.servers.values());\n    const servers = selector(topologyDescription, serverDescriptions);\n    if (servers.length !== 0) {\n      const endSessions = Array.from(this.s.sessionPool.sessions, _ref => {\n        let {\n          id\n        } = _ref;\n        return id;\n      });\n      if (endSessions.length !== 0) {\n        await this.db('admin').command({\n          endSessions\n        }, {\n          readPreference: read_preference_1.ReadPreference.primaryPreferred,\n          noResponse: true\n        }).catch(() => null); // outcome does not matter\n      }\n    }\n    // clear out references to old topology\n    const topology = this.topology;\n    this.topology = undefined;\n    await new Promise((resolve, reject) => {\n      topology.close({\n        force\n      }, error => {\n        if (error) return reject(error);\n        const {\n          encrypter\n        } = this[kOptions];\n        if (encrypter) {\n          return encrypter.close(this, force, error => {\n            if (error) return reject(error);\n            resolve();\n          });\n        }\n        resolve();\n      });\n    });\n  }\n  /**\n   * Create a new Db instance sharing the current socket connections.\n   *\n   * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n   * @param options - Optional settings for Db construction\n   */\n  db(dbName, options) {\n    options = options ?? {};\n    // Default to db from connection string if not provided\n    if (!dbName) {\n      dbName = this.options.dbName;\n    }\n    // Copy the options and add out internal override of the not shared flag\n    const finalOptions = Object.assign({}, this[kOptions], options);\n    // Return the db object\n    const db = new db_1.Db(this, dbName, finalOptions);\n    // Return the database\n    return db;\n  }\n  /**\n   * Connect to MongoDB using a url\n   *\n   * @remarks\n   * The programmatically provided options take precedence over the URI options.\n   *\n   * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n   */\n  static async connect(url, options) {\n    const client = new this(url, options);\n    return client.connect();\n  }\n  /** Starts a new session on the server */\n  startSession(options) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, {\n      explicit: true,\n      ...options\n    }, this[kOptions]);\n    this.s.activeSessions.add(session);\n    session.once('ended', () => {\n      this.s.activeSessions.delete(session);\n    });\n    return session;\n  }\n  async withSession(optionsOrOperation, callback) {\n    const options = {\n      // Always define an owner\n      owner: Symbol(),\n      // If it's an object inherit the options\n      ...(typeof optionsOrOperation === 'object' ? optionsOrOperation : {})\n    };\n    const withSessionCallback = typeof optionsOrOperation === 'function' ? optionsOrOperation : callback;\n    if (withSessionCallback == null) {\n      throw new error_1.MongoInvalidArgumentError('Missing required callback parameter');\n    }\n    const session = this.startSession(options);\n    try {\n      await withSessionCallback(session);\n    } finally {\n      try {\n        await session.endSession();\n      } catch {\n        // We are not concerned with errors from endSession()\n      }\n    }\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this cluster. Will ignore all\n   * changes to system collections, as well as the local, admin, and config databases.\n   *\n   * @remarks\n   * watch() accepts two generic arguments for distinct use cases:\n   * - The first is to provide the schema that may be defined for all the data within the current cluster\n   * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n   *\n   * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   * @typeParam TSchema - Type of the data being detected by the change stream\n   * @typeParam TChange - Type of the whole change stream document emitted\n   */\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n}\nexports.MongoClient = MongoClient;","map":{"version":3,"names":["util_1","require","bson_1","change_stream_1","connection_string_1","constants_1","db_1","error_1","mongo_logger_1","mongo_types_1","read_preference_1","server_selection_1","topology_1","sessions_1","utils_1","exports","ServerApiVersion","Object","freeze","v1","kOptions","Symbol","MongoClient","TypedEventEmitter","constructor","url","options","parseOptions","mongoLogger","MongoLogger","mongoLoggerOptions","client","s","bsonOptions","resolveBSONOptions","namespace","ns","hasBeenClosed","sessionPool","ServerSessionPool","activeSessions","Set","readConcern","writeConcern","readPreference","isMongoClient","serverApi","monitorCommands","value","autoEncrypter","connect","connectionLock","_connect","undefined","_this","topology","isConnected","srvHost","hosts","resolveSRVRecord","index","host","entries","Topology","once","OPEN","emit","event","MONGO_CLIENT_EVENTS","on","_len","arguments","length","args","Array","_key","topologyConnect","promisify","callback","error","close","force","initAutoEncrypter","init","encrypter","connectInternalClient","defineProperty","enumerable","configurable","writable","activeSessionEnds","from","session","endSession","clear","Promise","all","selector","readPreferenceServerSelector","ReadPreference","primaryPreferred","topologyDescription","description","serverDescriptions","servers","values","endSessions","sessions","_ref","id","db","command","noResponse","catch","resolve","reject","dbName","finalOptions","assign","Db","startSession","ClientSession","explicit","add","delete","withSession","optionsOrOperation","owner","withSessionCallback","MongoInvalidArgumentError","watch","pipeline","isArray","ChangeStream","resolveOptions"],"sources":["../src/mongo_client.ts"],"sourcesContent":[null],"mappings":";;;;;;AAEA,MAAAA,MAAA,GAAAC,OAAA;AAEA,MAAAC,MAAA,GAAAD,OAAA;AACA,MAAAE,eAAA,GAAAF,OAAA;AAOA,MAAAG,mBAAA,GAAAH,OAAA;AACA,MAAAI,WAAA,GAAAJ,OAAA;AACA,MAAAK,IAAA,GAAAL,OAAA;AAGA,MAAAM,OAAA,GAAAN,OAAA;AACA,MAAAO,cAAA,GAAAP,OAAA;AACA,MAAAQ,aAAA,GAAAR,OAAA;AAEA,MAAAS,iBAAA,GAAAT,OAAA;AAEA,MAAAU,kBAAA,GAAAV,OAAA;AAEA,MAAAW,UAAA,GAAAX,OAAA;AACA,MAAAY,UAAA,GAAAZ,OAAA;AACA,MAAAa,OAAA,GAAAb,OAAA;AAGA;AACac,OAAA,CAAAC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC5CC,EAAE,EAAE;CACI,CAAC;AAsQX;AACA,MAAMC,QAAQ,GAAGC,MAAM,CAAC,SAAS,CAAC;AAElC;;;;;;;;;;;;;;;;;;;AAmBA,MAAaC,WAAY,SAAQb,aAAA,CAAAc,iBAAoC;EAgBnEC,YAAYC,GAAW,EAAEC,OAA4B;IACnD,KAAK,EAAE;IAEP,IAAI,CAACN,QAAQ,CAAC,GAAG,IAAAhB,mBAAA,CAAAuB,YAAY,EAACF,GAAG,EAAE,IAAI,EAAEC,OAAO,CAAC;IACjD,IAAI,CAACE,WAAW,GAAG,IAAIpB,cAAA,CAAAqB,WAAW,CAAC,IAAI,CAACT,QAAQ,CAAC,CAACU,kBAAkB,CAAC;IAErE;IACA,MAAMC,MAAM,GAAG,IAAI;IAEnB;IACA,IAAI,CAACC,CAAC,GAAG;MACPP,GAAG;MACHQ,WAAW,EAAE,IAAA/B,MAAA,CAAAgC,kBAAkB,EAAC,IAAI,CAACd,QAAQ,CAAC,CAAC;MAC/Ce,SAAS,EAAE,IAAArB,OAAA,CAAAsB,EAAE,EAAC,OAAO,CAAC;MACtBC,aAAa,EAAE,KAAK;MACpBC,WAAW,EAAE,IAAIzB,UAAA,CAAA0B,iBAAiB,CAAC,IAAI,CAAC;MACxCC,cAAc,EAAE,IAAIC,GAAG,EAAE;MAEzB,IAAIf,OAAOA,CAAA;QACT,OAAOK,MAAM,CAACX,QAAQ,CAAC;MACzB,CAAC;MACD,IAAIsB,WAAWA,CAAA;QACb,OAAOX,MAAM,CAACX,QAAQ,CAAC,CAACsB,WAAW;MACrC,CAAC;MACD,IAAIC,YAAYA,CAAA;QACd,OAAOZ,MAAM,CAACX,QAAQ,CAAC,CAACuB,YAAY;MACtC,CAAC;MACD,IAAIC,cAAcA,CAAA;QAChB,OAAOb,MAAM,CAACX,QAAQ,CAAC,CAACwB,cAAc;MACxC,CAAC;MACD,IAAIC,aAAaA,CAAA;QACf,OAAO,IAAI;MACb;KACD;EACH;EAEA;EACA,IAAInB,OAAOA,CAAA;IACT,OAAOT,MAAM,CAACC,MAAM,CAAC;MAAE,GAAG,IAAI,CAACE,QAAQ;IAAC,CAAE,CAAC;EAC7C;EAEA,IAAI0B,SAASA,CAAA;IACX,OAAO,IAAI,CAAC1B,QAAQ,CAAC,CAAC0B,SAAS,IAAI7B,MAAM,CAACC,MAAM,CAAC;MAAE,GAAG,IAAI,CAACE,QAAQ,CAAC,CAAC0B;IAAS,CAAE,CAAC;EACnF;EACA;;;;EAIA,IAAIC,eAAeA,CAAA;IACjB,OAAO,IAAI,CAAC3B,QAAQ,CAAC,CAAC2B,eAAe;EACvC;EACA,IAAIA,eAAeA,CAACC,KAAc;IAChC,IAAI,CAAC5B,QAAQ,CAAC,CAAC2B,eAAe,GAAGC,KAAK;EACxC;EAEA,IAAIC,aAAaA,CAAA;IACf,OAAO,IAAI,CAAC7B,QAAQ,CAAC,CAAC6B,aAAa;EACrC;EAEA,IAAIP,WAAWA,CAAA;IACb,OAAO,IAAI,CAACV,CAAC,CAACU,WAAW;EAC3B;EAEA,IAAIC,YAAYA,CAAA;IACd,OAAO,IAAI,CAACX,CAAC,CAACW,YAAY;EAC5B;EAEA,IAAIC,cAAcA,CAAA;IAChB,OAAO,IAAI,CAACZ,CAAC,CAACY,cAAc;EAC9B;EAEA,IAAIX,WAAWA,CAAA;IACb,OAAO,IAAI,CAACD,CAAC,CAACC,WAAW;EAC3B;EAEA;;;;;EAKA,MAAMiB,OAAOA,CAAA;IACX,IAAI,IAAI,CAACC,cAAc,EAAE;MACvB,OAAO,IAAI,CAACA,cAAc;;IAG5B,IAAI;MACF,IAAI,CAACA,cAAc,GAAG,IAAI,CAACC,QAAQ,EAAE;MACrC,MAAM,IAAI,CAACD,cAAc;KAC1B,SAAS;MACR;MACA,IAAI,CAACA,cAAc,GAAGE,SAAS;;IAGjC,OAAO,IAAI;EACb;EAEA;;;;;;EAMQ,MAAMD,QAAQA,CAAA;IAAA,IAAAE,KAAA;IACpB,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACC,WAAW,EAAE,EAAE;MAChD,OAAO,IAAI;;IAGb,MAAM9B,OAAO,GAAG,IAAI,CAACN,QAAQ,CAAC;IAE9B,IAAI,OAAOM,OAAO,CAAC+B,OAAO,KAAK,QAAQ,EAAE;MACvC,MAAMC,KAAK,GAAG,MAAM,IAAAtD,mBAAA,CAAAuD,gBAAgB,EAACjC,OAAO,CAAC;MAE7C,KAAK,MAAM,CAACkC,KAAK,EAAEC,IAAI,CAAC,IAAIH,KAAK,CAACI,OAAO,EAAE,EAAE;QAC3CpC,OAAO,CAACgC,KAAK,CAACE,KAAK,CAAC,GAAGC,IAAI;;;IAI/B,MAAMN,QAAQ,GAAG,IAAI3C,UAAA,CAAAmD,QAAQ,CAACrC,OAAO,CAACgC,KAAK,EAAEhC,OAAO,CAAC;IACrD;IACA;IACA,IAAI,CAAC6B,QAAQ,GAAGA,QAAQ;IACxBA,QAAQ,CAACxB,MAAM,GAAG,IAAI;IAEtBwB,QAAQ,CAACS,IAAI,CAACpD,UAAA,CAAAmD,QAAQ,CAACE,IAAI,EAAE,MAAM,IAAI,CAACC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAE3D,KAAK,MAAMC,KAAK,IAAI9D,WAAA,CAAA+D,mBAAmB,EAAE;MACvCb,QAAQ,CAACc,EAAE,CAACF,KAAK,EAAE;QAAA,SAAAG,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAIC,IAAW,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;UAAXF,IAAW,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;QAAA;QAAA,OAAKrB,KAAI,CAACY,IAAI,CAACC,KAAK,EAAE,GAAIM,IAAY,CAAC;MAAA,EAAC;;IAG5E,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAW;MACjC,IAAI;QACF,MAAM,IAAA5E,MAAA,CAAA6E,SAAS,EAACC,QAAQ,IAAIvB,QAAQ,CAACL,OAAO,CAACxB,OAAO,EAAEoD,QAAQ,CAAC,CAAC,EAAE;OACnE,CAAC,OAAOC,KAAK,EAAE;QACdxB,QAAQ,CAACyB,KAAK,CAAC;UAAEC,KAAK,EAAE;QAAI,CAAE,CAAC;QAC/B,MAAMF,KAAK;;IAEf,CAAC;IAED,IAAI,IAAI,CAAC9B,aAAa,EAAE;MACtB,MAAMiC,iBAAiB,GAAG,IAAAlF,MAAA,CAAA6E,SAAS,EAACC,QAAQ,IAAI,IAAI,CAAC7B,aAAa,EAAEkC,IAAI,CAACL,QAAQ,CAAC,CAAC;MACnF,MAAMI,iBAAiB,EAAE;MACzB,MAAMN,eAAe,EAAE;MACvB,MAAMlD,OAAO,CAAC0D,SAAS,CAACC,qBAAqB,EAAE;KAChD,MAAM;MACL,MAAMT,eAAe,EAAE;;IAGzB,OAAO,IAAI;EACb;EAEA;;;;;EAKA,MAAMI,KAAKA,CAAA,EAAc;IAAA,IAAbC,KAAK,GAAAV,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAlB,SAAA,GAAAkB,SAAA,MAAG,KAAK;IACvB;IACAtD,MAAM,CAACqE,cAAc,CAAC,IAAI,CAACtD,CAAC,EAAE,eAAe,EAAE;MAC7CgB,KAAK,EAAE,IAAI;MACXuC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,KAAK;MACnBC,QAAQ,EAAE;KACX,CAAC;IAEF,MAAMC,iBAAiB,GAAGhB,KAAK,CAACiB,IAAI,CAAC,IAAI,CAAC3D,CAAC,CAACQ,cAAc,EAAEoD,OAAO,IAAIA,OAAO,CAACC,UAAU,EAAE,CAAC;IAC5F,IAAI,CAAC7D,CAAC,CAACQ,cAAc,CAACsD,KAAK,EAAE;IAE7B,MAAMC,OAAO,CAACC,GAAG,CAACN,iBAAiB,CAAC;IAEpC,IAAI,IAAI,CAACnC,QAAQ,IAAI,IAAI,EAAE;MACzB;;IAGF;IACA;IACA,MAAM0C,QAAQ,GAAG,IAAAtF,kBAAA,CAAAuF,4BAA4B,EAACxF,iBAAA,CAAAyF,cAAc,CAACC,gBAAgB,CAAC;IAC9E,MAAMC,mBAAmB,GAAG,IAAI,CAAC9C,QAAQ,CAAC+C,WAAW;IACrD,MAAMC,kBAAkB,GAAG7B,KAAK,CAACiB,IAAI,CAACU,mBAAmB,CAACG,OAAO,CAACC,MAAM,EAAE,CAAC;IAC3E,MAAMD,OAAO,GAAGP,QAAQ,CAACI,mBAAmB,EAAEE,kBAAkB,CAAC;IACjE,IAAIC,OAAO,CAAChC,MAAM,KAAK,CAAC,EAAE;MACxB,MAAMkC,WAAW,GAAGhC,KAAK,CAACiB,IAAI,CAAC,IAAI,CAAC3D,CAAC,CAACM,WAAW,CAACqE,QAAQ,EAAEC,IAAA;QAAA,IAAC;UAAEC;QAAE,CAAE,GAAAD,IAAA;QAAA,OAAKC,EAAE;MAAA,EAAC;MAC3E,IAAIH,WAAW,CAAClC,MAAM,KAAK,CAAC,EAAE;QAC5B,MAAM,IAAI,CAACsC,EAAE,CAAC,OAAO,CAAC,CACnBC,OAAO,CACN;UAAEL;QAAW,CAAE,EACf;UAAE9D,cAAc,EAAElC,iBAAA,CAAAyF,cAAc,CAACC,gBAAgB;UAAEY,UAAU,EAAE;QAAI,CAAE,CACtE,CACAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;;;IAI1B;IACA,MAAM1D,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,IAAI,CAACA,QAAQ,GAAGF,SAAS;IAEzB,MAAM,IAAI0C,OAAO,CAAO,CAACmB,OAAO,EAAEC,MAAM,KAAI;MAC1C5D,QAAQ,CAACyB,KAAK,CAAC;QAAEC;MAAK,CAAE,EAAEF,KAAK,IAAG;QAChC,IAAIA,KAAK,EAAE,OAAOoC,MAAM,CAACpC,KAAK,CAAC;QAC/B,MAAM;UAAEK;QAAS,CAAE,GAAG,IAAI,CAAChE,QAAQ,CAAC;QACpC,IAAIgE,SAAS,EAAE;UACb,OAAOA,SAAS,CAACJ,KAAK,CAAC,IAAI,EAAEC,KAAK,EAAEF,KAAK,IAAG;YAC1C,IAAIA,KAAK,EAAE,OAAOoC,MAAM,CAACpC,KAAK,CAAC;YAC/BmC,OAAO,EAAE;UACX,CAAC,CAAC;;QAEJA,OAAO,EAAE;MACX,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;;EAMAJ,EAAEA,CAACM,MAAe,EAAE1F,OAAmB;IACrCA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAEvB;IACA,IAAI,CAAC0F,MAAM,EAAE;MACXA,MAAM,GAAG,IAAI,CAAC1F,OAAO,CAAC0F,MAAM;;IAG9B;IACA,MAAMC,YAAY,GAAGpG,MAAM,CAACqG,MAAM,CAAC,EAAE,EAAE,IAAI,CAAClG,QAAQ,CAAC,EAAEM,OAAO,CAAC;IAE/D;IACA,MAAMoF,EAAE,GAAG,IAAIxG,IAAA,CAAAiH,EAAE,CAAC,IAAI,EAAEH,MAAM,EAAEC,YAAY,CAAC;IAE7C;IACA,OAAOP,EAAE;EACX;EAEA;;;;;;;;EAQA,aAAa5D,OAAOA,CAACzB,GAAW,EAAEC,OAA4B;IAC5D,MAAMK,MAAM,GAAG,IAAI,IAAI,CAACN,GAAG,EAAEC,OAAO,CAAC;IACrC,OAAOK,MAAM,CAACmB,OAAO,EAAE;EACzB;EAEA;EACAsE,YAAYA,CAAC9F,OAA8B;IACzC,MAAMkE,OAAO,GAAG,IAAI/E,UAAA,CAAA4G,aAAa,CAC/B,IAAI,EACJ,IAAI,CAACzF,CAAC,CAACM,WAAW,EAClB;MAAEoF,QAAQ,EAAE,IAAI;MAAE,GAAGhG;IAAO,CAAE,EAC9B,IAAI,CAACN,QAAQ,CAAC,CACf;IACD,IAAI,CAACY,CAAC,CAACQ,cAAc,CAACmF,GAAG,CAAC/B,OAAO,CAAC;IAClCA,OAAO,CAAC5B,IAAI,CAAC,OAAO,EAAE,MAAK;MACzB,IAAI,CAAChC,CAAC,CAACQ,cAAc,CAACoF,MAAM,CAAChC,OAAO,CAAC;IACvC,CAAC,CAAC;IACF,OAAOA,OAAO;EAChB;EAaA,MAAMiC,WAAWA,CACfC,kBAA8D,EAC9DhD,QAA8B;IAE9B,MAAMpD,OAAO,GAAG;MACd;MACAqG,KAAK,EAAE1G,MAAM,EAAE;MACf;MACA,IAAI,OAAOyG,kBAAkB,KAAK,QAAQ,GAAGA,kBAAkB,GAAG,EAAE;KACrE;IAED,MAAME,mBAAmB,GACvB,OAAOF,kBAAkB,KAAK,UAAU,GAAGA,kBAAkB,GAAGhD,QAAQ;IAE1E,IAAIkD,mBAAmB,IAAI,IAAI,EAAE;MAC/B,MAAM,IAAIzH,OAAA,CAAA0H,yBAAyB,CAAC,qCAAqC,CAAC;;IAG5E,MAAMrC,OAAO,GAAG,IAAI,CAAC4B,YAAY,CAAC9F,OAAO,CAAC;IAE1C,IAAI;MACF,MAAMsG,mBAAmB,CAACpC,OAAO,CAAC;KACnC,SAAS;MACR,IAAI;QACF,MAAMA,OAAO,CAACC,UAAU,EAAE;OAC3B,CAAC,MAAM;QACN;MAAA;;EAGN;EAEA;;;;;;;;;;;;;;;EAeAqC,KAAKA,CAAA,EAGyD;IAAA,IAA5DC,QAAA,GAAA5D,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAlB,SAAA,GAAAkB,SAAA,MAAuB,EAAE;IAAA,IAAE7C,OAAA,GAAA6C,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAlB,SAAA,GAAAkB,SAAA,MAA+B,EAAE;IAC5D;IACA,IAAI,CAACG,KAAK,CAAC0D,OAAO,CAACD,QAAQ,CAAC,EAAE;MAC5BzG,OAAO,GAAGyG,QAAQ;MAClBA,QAAQ,GAAG,EAAE;;IAGf,OAAO,IAAIhI,eAAA,CAAAkI,YAAY,CAAmB,IAAI,EAAEF,QAAQ,EAAE,IAAArH,OAAA,CAAAwH,cAAc,EAAC,IAAI,EAAE5G,OAAO,CAAC,CAAC;EAC1F;;AA1VFX,OAAA,CAAAO,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}