{"ast":null,"code":"'use strict';\n\nmodule.exports = function merge(s1, s2, skipConflictingPaths) {\n  const paths = Object.keys(s2.tree);\n  const pathsToAdd = {};\n  for (const key of paths) {\n    if (skipConflictingPaths && (s1.paths[key] || s1.nested[key] || s1.singleNestedPaths[key])) {\n      continue;\n    }\n    pathsToAdd[key] = s2.tree[key];\n  }\n  s1.add(pathsToAdd);\n  s1.callQueue = s1.callQueue.concat(s2.callQueue);\n  s1.method(s2.methods);\n  s1.static(s2.statics);\n  for (const [option, value] of Object.entries(s2._userProvidedOptions)) {\n    if (!(option in s1._userProvidedOptions)) {\n      s1._userProvidedOptions[option] = value;\n      s1.options[option] = value;\n    }\n  }\n  for (const query in s2.query) {\n    s1.query[query] = s2.query[query];\n  }\n  for (const virtual in s2.virtuals) {\n    s1.virtuals[virtual] = s2.virtuals[virtual].clone();\n  }\n  s1._indexes = s1._indexes.concat(s2._indexes || []);\n  s1.s.hooks.merge(s2.s.hooks, false);\n};","map":{"version":3,"names":["module","exports","merge","s1","s2","skipConflictingPaths","paths","Object","keys","tree","pathsToAdd","key","nested","singleNestedPaths","add","callQueue","concat","method","methods","static","statics","option","value","entries","_userProvidedOptions","options","query","virtual","virtuals","clone","_indexes","s","hooks"],"sources":["C:/Users/sama/Documents/fullpage/node_modules/mongoose/lib/helpers/schema/merge.js"],"sourcesContent":["'use strict';\n\nmodule.exports = function merge(s1, s2, skipConflictingPaths) {\n  const paths = Object.keys(s2.tree);\n  const pathsToAdd = {};\n  for (const key of paths) {\n    if (skipConflictingPaths && (s1.paths[key] || s1.nested[key] || s1.singleNestedPaths[key])) {\n      continue;\n    }\n    pathsToAdd[key] = s2.tree[key];\n  }\n  s1.add(pathsToAdd);\n\n  s1.callQueue = s1.callQueue.concat(s2.callQueue);\n  s1.method(s2.methods);\n  s1.static(s2.statics);\n\n  for (const [option, value] of Object.entries(s2._userProvidedOptions)) {\n    if (!(option in s1._userProvidedOptions)) {\n      s1._userProvidedOptions[option] = value;\n      s1.options[option] = value;\n    }\n  }\n\n  for (const query in s2.query) {\n    s1.query[query] = s2.query[query];\n  }\n\n  for (const virtual in s2.virtuals) {\n    s1.virtuals[virtual] = s2.virtuals[virtual].clone();\n  }\n\n  s1._indexes = s1._indexes.concat(s2._indexes || []);\n  s1.s.hooks.merge(s2.s.hooks, false);\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG,SAASC,KAAKA,CAACC,EAAE,EAAEC,EAAE,EAAEC,oBAAoB,EAAE;EAC5D,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACJ,EAAE,CAACK,IAAI,CAAC;EAClC,MAAMC,UAAU,GAAG,CAAC,CAAC;EACrB,KAAK,MAAMC,GAAG,IAAIL,KAAK,EAAE;IACvB,IAAID,oBAAoB,KAAKF,EAAE,CAACG,KAAK,CAACK,GAAG,CAAC,IAAIR,EAAE,CAACS,MAAM,CAACD,GAAG,CAAC,IAAIR,EAAE,CAACU,iBAAiB,CAACF,GAAG,CAAC,CAAC,EAAE;MAC1F;IACF;IACAD,UAAU,CAACC,GAAG,CAAC,GAAGP,EAAE,CAACK,IAAI,CAACE,GAAG,CAAC;EAChC;EACAR,EAAE,CAACW,GAAG,CAACJ,UAAU,CAAC;EAElBP,EAAE,CAACY,SAAS,GAAGZ,EAAE,CAACY,SAAS,CAACC,MAAM,CAACZ,EAAE,CAACW,SAAS,CAAC;EAChDZ,EAAE,CAACc,MAAM,CAACb,EAAE,CAACc,OAAO,CAAC;EACrBf,EAAE,CAACgB,MAAM,CAACf,EAAE,CAACgB,OAAO,CAAC;EAErB,KAAK,MAAM,CAACC,MAAM,EAAEC,KAAK,CAAC,IAAIf,MAAM,CAACgB,OAAO,CAACnB,EAAE,CAACoB,oBAAoB,CAAC,EAAE;IACrE,IAAI,EAAEH,MAAM,IAAIlB,EAAE,CAACqB,oBAAoB,CAAC,EAAE;MACxCrB,EAAE,CAACqB,oBAAoB,CAACH,MAAM,CAAC,GAAGC,KAAK;MACvCnB,EAAE,CAACsB,OAAO,CAACJ,MAAM,CAAC,GAAGC,KAAK;IAC5B;EACF;EAEA,KAAK,MAAMI,KAAK,IAAItB,EAAE,CAACsB,KAAK,EAAE;IAC5BvB,EAAE,CAACuB,KAAK,CAACA,KAAK,CAAC,GAAGtB,EAAE,CAACsB,KAAK,CAACA,KAAK,CAAC;EACnC;EAEA,KAAK,MAAMC,OAAO,IAAIvB,EAAE,CAACwB,QAAQ,EAAE;IACjCzB,EAAE,CAACyB,QAAQ,CAACD,OAAO,CAAC,GAAGvB,EAAE,CAACwB,QAAQ,CAACD,OAAO,CAAC,CAACE,KAAK,EAAE;EACrD;EAEA1B,EAAE,CAAC2B,QAAQ,GAAG3B,EAAE,CAAC2B,QAAQ,CAACd,MAAM,CAACZ,EAAE,CAAC0B,QAAQ,IAAI,EAAE,CAAC;EACnD3B,EAAE,CAAC4B,CAAC,CAACC,KAAK,CAAC9B,KAAK,CAACE,EAAE,CAAC2B,CAAC,CAACC,KAAK,EAAE,KAAK,CAAC;AACrC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}